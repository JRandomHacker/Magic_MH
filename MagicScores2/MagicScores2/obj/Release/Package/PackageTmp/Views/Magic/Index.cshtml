@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    Magic.Core.Event mainEvent = ViewBag.Event;
    int round = ViewBag.Round;
    List<Magic.Core.Player> players = ViewBag.Players;
    string eventName = ViewBag.eventName;
    int numMatches = mainEvent.RoundMatchCount(round);
    int maxMatchesPlayed = mainEvent.Players.Max(p => p.matches.Count(m => m.Round == round));
    int totalMatchesRemaining = (mainEvent.TotalMatches(round) - mainEvent.TotalMatchesPlayed(round) / 2);
    TimeSpan timeTillEnd = mainEvent.RoundEndDate - DateTime.Now;
    int weeksTillEnd = (int)timeTillEnd.TotalDays / 7;
    int daysTillEnd = (int)timeTillEnd.TotalDays % 7;
    int hoursTillEnd = (int)timeTillEnd.TotalHours % 24;
    string endTimeString;
    int scoreIndex;

    if (weeksTillEnd > 1)
    {
        endTimeString = string.Format("{0} weeks, {1} days", weeksTillEnd, daysTillEnd);
    }
    else if (weeksTillEnd > 0)
    {
        endTimeString = string.Format("{0} week, {1} days", weeksTillEnd, daysTillEnd);
    }
    else if (daysTillEnd > 1)
    {
        endTimeString = string.Format("{0} days", daysTillEnd);
    }
    else if (daysTillEnd > 0)
    {
        endTimeString = string.Format("{0} day", daysTillEnd);
    }
    else if (timeTillEnd.TotalMilliseconds > 0)
    {
        endTimeString = string.Format("{0} hours", hoursTillEnd);
    }
    else
    {
        endTimeString = "Finished!";
    }


}

<h2>Players - @eventName - Round @round</h2>
<h3>Round Ends: @string.Format("{0} - {1}", mainEvent.RoundEndDate.ToString(), endTimeString)</h3>

<table border="1" class="matchTable">
    <thead class="tableHeader">
        <tr>
            <th>Player</th>
            @for (int i = 0; i < maxMatchesPlayed; i++)
            {
                <th>Opp. </th>
                <th class="centered">Games</th>
                <th class="centered">Result</th>
            }
            <th>Score</th>
            <th>Matches Played</th>
        </tr>
    </thead>
    @foreach (Magic.Core.Player p in players)
    {
        <tr class="keyplayer">
            <td>@string.Format("{0}", p.name)</td>
            @foreach (Magic.Core.Match m in p.matches.Where(m => m.Round == round))
            {
                var normalizedMatch = m.WithPlayerOneAs(p.name);
                var matchResult = "";
                if (normalizedMatch.Player1Wins == 0 && normalizedMatch.Player2Wins == 0 && normalizedMatch.Draws <= 1)
                { matchResult = ""; }
                else if (normalizedMatch.Player1Wins == normalizedMatch.Player2Wins)
                { matchResult = "Draw"; }
                else if (normalizedMatch.Player1Wins > normalizedMatch.Player2Wins)
                { matchResult = "Win"; }
                else if (normalizedMatch.Player2Wins > normalizedMatch.Player1Wins)
                { matchResult = "Loss"; }
                var matchWin = normalizedMatch.Player1Wins > normalizedMatch.Player2Wins ? "Win" : "Loss";
                var matchUrl = String.Format(@"/{0}/{1}/{2}/{3}/", eventName, round, normalizedMatch.Player1Name, normalizedMatch.Player2Name);

                <td class="opponentplayer"><a href="@matchUrl">@normalizedMatch.Player2.name</a></td>
                <td class="centered"><text>@normalizedMatch.Player1Wins</text>-<text>@normalizedMatch.Player2Wins</text></td>
                if (@matchResult == "Win")
                {
                    <td class="centered wincolor">@matchResult</td>
                }
                else
                {
                    <td class="centered">@matchResult</td>
                }
            }
            <td class="playerScore">@p.Score(round)</td>
            <td class="playerScore">@p.matchesCompleted(round)<text>/</text>@mainEvent.RoundMatches</td>
        </tr>
    }
</table>
<br />
<table border="1" class="standingTable">
    <thead class="tableHeader">
        <tr>
            <th>Place</th>
            <th>Player</th>
            <th>Score</th>
            <th>OMWP</th>
            <th>GWP</th>
            <th>OGWP</th>
            <th>Remaining Matches</th>
        </tr>
    </thead>
    <tbody>

        @{
                    scoreIndex = 1;
                    foreach (Magic.Core.Player p in players.OrderByDescending(p => p.Score(round)).ThenByDescending(p => p.OMWP(round)).ThenByDescending(p => p.GWP(round)).ThenByDescending(p => p.OGWP(round)))
                    {

                <tr>
                    <td class="playerScore">@(scoreIndex++)</td>
                    <td class="keyplayer">@p.name</td>
                    <td class="playerScore">@p.Score(round)</td>
                    <td class="playerScore">@p.OMWP(round).ToString("F4")<text>%</text></td>
                    <td class="playerScore">@p.GWP(round).ToString("F4")<text>%</text></td>
                    <td class="playerScore">@p.OGWP(round).ToString("F4")<text>%</text></td>
                    <td class="playerScore">@(@mainEvent.RoundMatchCount(round) - @p.matchesCompleted(round))</td>

                    @foreach (Magic.Core.Player o in p.Opponents(round))
                {
                        <td class="omwpList">@o.name</td>
                        <td class="omwpList">@o.MWP(round).ToString("F0")<text>% </text></td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
<br />
<table border="1" class="standingTable">
    <tbody>
        <tr>
            <td class="keyplayer">Total Remaining Matches</td>
            <td class="playerScore">@totalMatchesRemaining</td>
        </tr>
    </tbody>
</table>